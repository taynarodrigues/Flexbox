/* usando o flexbox: verificar quem é o pai? */

.cabecalhoPrincipal .container {
    display: flex;
    /* alinhar verticalmente os elementos que estão dentro desse container*/
    align-items: center;
    /* colocar o espaço entre os elementos usando space-between */
    justify-content: space-between;
}


/* Colocando elementos um do lado do outro, precisa verificar Quem é o Pai deles? */

.cabecalhoPrincipal-nav {
    display: flex;
}

.rodapePrincipal-patrocinadores .container {
    /* alinhou um do lado do outro. Perfeito!!! */
    display: flex;
    /* colocar o espaço entre os elementos usando space-between */
    justify-content: space-between;
}

.rodapePrincipal-patrocinadores-list {
    /* colocar o display flex no pai que é a 'ul' */
    display: flex;
    /* alinhar no centro */
    align-items: center;
    /* arrumando espaços INTEGRALMENTE entre  os elementos, ou seja, distribuir espaço em volta dos elementos */
    justify-content: space-around;
    /* definir a largura do elemento da 'ul' com o width */
    width: 70%;
    /* descolar os elementos que estão juntos coloca 70% e um margin-right de 5% */
    margin-right: 5%;
}

.rodapePrincipal-contatoForm {
    /* definir a largura do formulário */
    width: 25%;
}

.rodapePrincipal-contatoForm-fieldset {
    /* display: flex na div que é 'pai' do input do botão, onde o filho pega o mesmo tamanho, ele alinha o tamanho, alinha à altura dos elementos */
    /* Portanto, o flex também deixa os filhos com a mesma aparência dos pais! */
    display: flex;
}

.rodapePrincipal-navMap-list {
    /* naturalmente o display flex distribui os elementos lado a lado */
    display: flex;
    /* deixa um elemento do lado do outro 'HORIZONTAL'  -> flex-direction: row;*/
    /* flex-direction: row; */
    /* deixa um elemento do lado do outro 'VERTICAL'  -> flex-direction: column;*/
    /* flex-direction: column; */
    /* e uma altura de 250px, e depois pedir para o 'WRAP' quebrar para a próx coluna*/
    /* um atalho para juntar as duas propriedades: flex-direction: column; e   flex-wrap: wrap;*/
    flex-flow: column wrap;
    height: 250px;
    /* Que faça a quebra para a próxima linha, ou seja, continuasse na próx coluna 'NÃO COUBE NO PAI QUEBRA E VAI PARA A PRÓX COLUNA*/
    /* flex-wrap: wrap; */
}

.conteudoPrincipal-cursos {
    /* para ajeitar a lista temos que colocar flexbox no pai */
    display: flex;
    /* Quebrar para a próx linha caso não haja tamanho */
    flex-wrap: wrap;
    /* flex-start joga tudo para a esquerda e o flex-end tudo para a direita */
    /* justify-content: flex-end; */
    /* descolar os elementos que estão juntos um margin-bottom de 1% */
    /* margin-bottom: 1%; */
    /* margin em todos os eixos */
    margin: 1%;
    /* porcentagem de margem */
}

.conteudoPrincipal-cursos-link {
    /* definir tamanho para o 'li' width: 20%, porém ficou tudo aglomerado */
    width: 23%;
    /* porcentagem na largura!  */
}


/* Tivemos cuidado: com os elementos à esquerda e a direita não tiver uma margem a mais nos cantos com o uso do grid 'nth-child'*/

.conteudoPrincipal-cursos-link:nth-child(4n) {
    /* Tirar a margem....Pegar o 4°filho, múltiplo de 4. */
    margin-right: 0%;
}


/* Tivemos cuidado: com os elementos à esquerda e a direita não tiver uma margem a mais nos cantos com o uso do grid 'nth-child' */

.conteudoPrincipal-cursos-link:nth-child(4n+1) {
    /* Tirar a margem....Pegar o 4°filho mais 1. */
    margin-left: 0%;
}


/* COMEÇANDO RESPONSIVO - PARTE MOBILE*/


/* Não existem muitos segredos para modificar para Mobile.
Falta um detalhe! Ao aumentar a tela, até quando ela permanece 
com a cara do layout Mobile? Pois, mesmo colocando o tamanho 
equivalente a tela do desktop, a aparência de um celular segue:
Depois de 768 px é interessante que a aparência deixe de ser a do Tablet e 
volte a ser a de Desktop. 
Portanto, é preciso inserir um media query logo que o código de Mobile inicia. 
 */


/* Com isso, até 768 px ele renderiza Mobile e depois volta ao layout para Desktop! */

@media(max-width: 768px) {
    .cabecalhoPrincipal-nav {
        flex-direction: column;
    }
    .cabecalhoPrincipal .container {
        /* um debaixo do outro */
        flex-direction: column;
        /* sem alinhar no centro */
        align-items: initial;
        /* alinhar o TEXTO no centro */
        text-align: center;
    }
    .conteudoPrincipal-cursos-link {
        /* largura máxima */
        width: 100%;
    }
    .conteudoPrincipal-cursos {
        /* mudar à quebra de linha -> TIRAR A QUEBRA */
        /* flex-wrap: nowrap; */
        /* Vamos deixar um debaixo do outro */
        flex-direction: column;
    }
    .rodapePrincipal-navMap-list {
        /* se vira para calcular */
        height: auto;
    }
    .rodapePrincipal-patrocinadores .container {
        /* para ficar um debaixo do outro MUITO BOM*/
        flex-direction: column;
        /* alinhar ele no centro com relação ao texto cruzado usar o  align-items: center; */
        align-items: center;
    }
    .rodapePrincipal-contatoForm {
        /* Vamos sobreEscrever e por width: 100%; para ocupar a largura inteira */
        width: 100%;
    }
    .rodapePrincipal-patrocinadores-list {
        margin: 0%;
        width: 100%;
    }
    .rodapePrincipal-contatoForm-fieldset {
        /* concertar o formulário */
        justify-content: center;
    }
}