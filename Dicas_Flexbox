FLEXBOX
O flexbox, que é uma especificação CSS.
Para descobrir em quais sistemas a propriedade funciona podemos consultar o site 'Can I Use'.

Vamos rever alguns recursos do flexbox:

display: flex: ativa o flexbox no elemento;
align-items: distribui verticalmente os elementos dentro de um container flex;
justify-content: distribuir os elementos espaçadamente dentro do container;
flex-direction: permite inverter o align-items;
order: muda a ordem dos elementos;
flex: indica a proporção do tamanho dos elementos. Ele é um atalho para mais três propriedades:
flex-grow: determina quanto o elemento deve crescer;
flex-shrink: determina quanto o elemento deve diminuir;
flex-basis: determina o tamanho mínimo do elemento.
O flexbox é uma dentre várias outras especificações que estão surgindo no CSS para facilitar nosso trabalho com layout e deixar o código mais simples.

Pegando nosso primeiro exemplo, podemos resolvê-lo usando três linhas no pai:

.container {
    display: flex;
    align-items: center;
    justify-content: space-between;
}
"display: flex": faz com que o container se comporte como um flexbox, ou seja, ele controlará o layout de seus filhos. Por padrão, os filhos terão a mesma altura e alinhados à esquerda;
"align-items": center": centraliza verticalmente os elementos filhos dentro do pai;
"justify-content: space-between": distribui entre os elementos o espaço que está sobrando.

Para que serve a propriedade flex?
Controlar o tamanho de elementos internos a um container flex.

O que a declaração flex: 2 faz?
Faz com que o elemento ocupe o dobro do espaço de elementos com flex: 1.

Usando a propriedade flex - 2
A propriedade flex aceita até 3 valores, que correspondem a 3 propriedades da especificação Flexbox. Quais propriedades são essas?
flex-grow, flex-shrink e flex-basis


Digamos que temos o seguinte código:

<section class="pai">
  <div class="filho">Primeiro filho</div>
  <div class="filho">Segundo filho</div>
</section>

Colocamos:

.pai {
  display: flex;
}

O valor da propriedade display referente ao flexbox é flex.

Ou seja, ficaria display: flex

Espaçando com flexbox
PRÓXIMA ATIVIDADE

Vimos no primeiro exercício dessa aula que podemos espaçar os elementos que tem o pai com a propriedade display: flex de forma fácil.

Veja o seguinte problema:

<header class="cabecalho">
  <a class="logo" href="#">
    <img src="img/logo.png">
  </a>

  <ul class="menu">
    <li class="menu-item">Item 1 do menu</li>
    <li class="menu-item">Item 2 do menu</li>
    <li class="menu-item">Item 3 do menu</li>
    <li class="menu-item">Item 4 do menu</li>
  </ul>
</header>
Como podemos fazer com que o menu fique do lado direito e o logo do lado esquerdo?

Primeiro devemos colocar display: flex no pai, para isso fariamos:

.cabecalho {
  display: flex;
}
Agora automaticamente o .logo e o .menu ficam um do lado do outro.

Dessa forma deve sobrar bastante espaço à direita deles. Para alocar todo esse espaço que está a direita para ficar entre eles devemos colocar a propriedade

justify-content: space-between

No .cabecalho, ou seja, no pai.

O código para isso ficaria assim:

.cabecalho {
  display: flex;
  justify-content: space-between;
}

Alinhando adequadamente os elementos

Bom, até agora conseguimos usar o flexbox para distribuir os elementos um do lado do outro e separá-los colocando espaço entre eles. A questão é que esses elementos podem ter alturas diferentes e dessa forma ficarem desalinhados verticalmente. Veja o seguinte código ( que é o mesmo do último exercício )

<header class="cabecalho">
  <a class="logo" href="#">
    <img src="img/logo.png">
  </a>

  <ul class="menu">
    <li class="menu-item">Item 1 do menu</li>
    <li class="menu-item">Item 2 do menu</li>
    <li class="menu-item">Item 3 do menu</li>
    <li class="menu-item">Item 4 do menu</li>
  </ul>
</header>
Bom, o css até agora está assim:

.cabecalho {
  display: flex;
  justify-content: space-between;
}
Tendo em vista tudo isso acima, como podemos alinhar os elementos (.menu e . logo) verticalmente?

Devemos colocar align-items: center no pai, dessa forma todos os elementos ficam alinhados verticalmente no centro.

O código ficaria assim:

.cabecalho {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

align-items nós devemos colocar no pai. Dessa forma todos os seus filhos são afetados.

A propriedade align-items faz com que os elementos dentro do pai que está com flex se alinhem verticalmente, portanto, pra eles ficarem alinhados no centro podemos usar align-items: center, colocando essa propriedade no pai dos elementos que queremos alinhar, no caso cabecalho.


Formas de espaçar os elementos
Sabemos que a propriedade justify-content: space-between faz com que o espaço que sobrou no nosso elemento pai seja distribuído entre os filhos, porém é claro que esse não é o único valor da propriedade justify-content. Por exemplo, de que outras formas podemos distribuir esse espaço?

Qual o valor da propriedade justify-content para essas distribuições de espaço?
Podemos distribuir os elementos dentro do pai de diversas formas, podemos por exemplo:

Colocar todo espaço à esquerda, jogando o conteúdo para direita com justify-content: flex-end.

Colocar todo espaço à direita, jogando o conteúdo para esquerda com justify-content: flex-start (que é o padrão).

Colocar todo espaço à esquerda e à direita, jogando o conteúdo para o meio com justify-content: center.

Colocar todo espaço entre os elementos como vimos antes usando justify-content: space-between.

E uma possibilidade bem interessante também é colocar o espaço em volta dos elementos. Podemos usar o justify-content: space-around para isso.


Elementos na vertical
Normalmente quando colocamos display: flex em algum elemento, os seus filhos ficam um do lado do outro. Porém existem casos em que queremos que os filhos fiquem um em baixo do outro, como podemos fazer isso?
Podemos colocar flex-direction: column no elemento pai
Podemos colocar flex-direction: column no pai, dessa forma ele muda o fluxo o qual o flexbox renderiza os elementos. Assim eles ficam um em baixo do outro.


Indo para a próxima coluna
Para arrumar nossa situação devemos falar para o flex não transbordar o conteúdo, de forma que quando o conteúdo ultrapassar o tamanho do pai, ele simplesmente quebre para uma próxima coluna. Para fazer isso usamos flex-wrap: wrap.

Tipo de flex! O flex-start joga tudo para a direita, o flex-end para a esquerda e o flex-center coloca os elementos no centro.

-------------------------EXEMPLO----------------------------------
Repare que os elementos da primeira coluna possuem uma margem a esquerda e os objetos da última uma margem a direita:
Porém, para manter as proporções tais margens não fazem sentido, elas atrapalham mais do que ajudam! Então, no caso dos elementos da última coluna, estamos lidando com objetos nas posições 4, 8, 12 e 16, ou seja, itens que são múltiplos de 4. Portanto, no arquivo flexbox.css vamos adicionar o .conteudoPrincipal-cursos-link e acrescentar o nth-child(). Como queremos pegar o "quarto filho" adicionamos entre os parênteses o 4n. O código fica da seguinte maneira:

.conteudoPrincipal-cursos-link:nth-child(4n) {
    margin-left: 0;

}
Observando a página vemos que de fato os itens tiveram a margem zerada:
Falta retirar ainda a margem esquerda dos elementos da primeira coluna. Estes objetos estão na sequência dos objetos múltiplos de 4, isto é, depois do quarto vem o quinto, depois do oitavo vem o nono, depois do décimo segundo o décimo terceiro e assim por diante. Portanto, tais objetos equivalem a 4+1, então, vamos escrever nth-child(4n+1) e colocar também a margin-left: 0:

.conteudoPrincipal-cursos-link:nth-child(4n+1) {
    margin-left: 0;

}
Dando um reload vemos que todos os objetos foram arrumados inclusive o primeiro:
Isso acontece pois o n do primeiro elemento equivale a 0, então, 4x0 + 1 = 1 e por isso ele é ajustado! No segundo item o n =1, assim, 4x1 + 1 = 5, no terceiro ícone n = 2, 4x2 + 1 = 9 e assim por diante.

Utilizando o nth, que é relativamente fácil de usar, solucionamos a questão da distribuição! O que fizemos foi um gride de caixas organizadamente posicionadas. O flex é capaz de fazer gride, ainda assim, não existe uma maneira fácil de espaçar os elementos. Foi preciso utilizar não apenas o nth mas também fazer contas com a largura e a margem para resolver o problema!
