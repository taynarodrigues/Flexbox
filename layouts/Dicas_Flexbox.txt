Curso de
Flexbox: Posicione elementos na tela

Aulas
Atividades Concluidas
Introdução ao flexbox e fazendo o cabeçalho

Fazendo o footer e controlando melhor os elementos

Grid principal e limitações do flexbox

Arrumando os elementos com flex para mobile

Mais sobre flexbox & desafios


FLEXBOX -> https://github.com/alura-cursos
O flexbox, que é uma especificação CSS.
Para descobrir em quais sistemas a propriedade funciona podemos consultar o site 'Can I Use'.

Vamos rever alguns recursos do flexbox:

display: flex: ativa o flexbox no elemento;
align-items: distribui verticalmente os elementos dentro de um container flex;
justify-content: distribuir os elementos espaçadamente dentro do container;
flex-direction: permite inverter o align-items;
order: muda a ordem dos elementos;
flex: indica a proporção do tamanho dos elementos. Ele é um atalho para mais três propriedades:
flex-grow: determina quanto o elemento deve crescer;
flex-shrink: determina quanto o elemento deve diminuir;
flex-basis: determina o tamanho mínimo do elemento.
O flexbox é uma dentre várias outras especificações que estão surgindo no CSS para facilitar nosso trabalho com layout e deixar o código mais simples.

Pegando nosso primeiro exemplo, podemos resolvê-lo usando três linhas no pai:

.container {
    display: flex;
    align-items: center;
    justify-content: space-between;
}
"display: flex": faz com que o container se comporte como um flexbox, ou seja, ele controlará o layout de seus filhos. Por padrão, os filhos terão a mesma altura e alinhados à esquerda;
"align-items": center": centraliza verticalmente os elementos filhos dentro do pai;
"justify-content: space-between": distribui entre os elementos o espaço que está sobrando.

Para que serve a propriedade flex?
Controlar o tamanho de elementos internos a um container flex.

O que a declaração flex: 2 faz?
Faz com que o elemento ocupe o dobro do espaço de elementos com flex: 1.

Usando a propriedade flex - 2
A propriedade flex aceita até 3 valores, que correspondem a 3 propriedades da especificação Flexbox. Quais propriedades são essas?
flex-grow, flex-shrink e flex-basis


Digamos que temos o seguinte código:

<section class="pai">
  <div class="filho">Primeiro filho</div>
  <div class="filho">Segundo filho</div>
</section>

Colocamos:

.pai {
  display: flex;
}

O valor da propriedade display referente ao flexbox é flex.

Ou seja, ficaria display: flex

Espaçando com flexbox
PRÓXIMA ATIVIDADE

Vimos no primeiro exercício dessa aula que podemos espaçar os elementos que tem o pai com a propriedade display: flex de forma fácil.

Veja o seguinte problema:

<header class="cabecalho">
  <a class="logo" href="#">
    <img src="img/logo.png">
  </a>

  <ul class="menu">
    <li class="menu-item">Item 1 do menu</li>
    <li class="menu-item">Item 2 do menu</li>
    <li class="menu-item">Item 3 do menu</li>
    <li class="menu-item">Item 4 do menu</li>
  </ul>
</header>
Como podemos fazer com que o menu fique do lado direito e o logo do lado esquerdo?

Primeiro devemos colocar display: flex no pai, para isso fariamos:

.cabecalho {
  display: flex;
}
Agora automaticamente o .logo e o .menu ficam um do lado do outro.

Dessa forma deve sobrar bastante espaço à direita deles. Para alocar todo esse espaço que está a direita para ficar entre eles devemos colocar a propriedade

justify-content: space-between

No .cabecalho, ou seja, no pai.

O código para isso ficaria assim:

.cabecalho {
  display: flex;
  justify-content: space-between;
}

Alinhando adequadamente os elementos

Bom, até agora conseguimos usar o flexbox para distribuir os elementos um do lado do outro e separá-los colocando espaço entre eles. A questão é que esses elementos podem ter alturas diferentes e dessa forma ficarem desalinhados verticalmente. Veja o seguinte código ( que é o mesmo do último exercício )

<header class="cabecalho">
  <a class="logo" href="#">
    <img src="img/logo.png">
  </a>

  <ul class="menu">
    <li class="menu-item">Item 1 do menu</li>
    <li class="menu-item">Item 2 do menu</li>
    <li class="menu-item">Item 3 do menu</li>
    <li class="menu-item">Item 4 do menu</li>
  </ul>
</header>
Bom, o css até agora está assim:

.cabecalho {
  display: flex;
  justify-content: space-between;
}
Tendo em vista tudo isso acima, como podemos alinhar os elementos (.menu e . logo) verticalmente?

Devemos colocar align-items: center no pai, dessa forma todos os elementos ficam alinhados verticalmente no centro.

O código ficaria assim:

.cabecalho {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

align-items nós devemos colocar no pai. Dessa forma todos os seus filhos são afetados.

A propriedade align-items faz com que os elementos dentro do pai que está com flex se alinhem verticalmente, portanto, pra eles ficarem alinhados no centro podemos usar align-items: center, colocando essa propriedade no pai dos elementos que queremos alinhar, no caso cabecalho.


Formas de espaçar os elementos
Sabemos que a propriedade justify-content: space-between faz com que o espaço que sobrou no nosso elemento pai seja distribuído entre os filhos, porém é claro que esse não é o único valor da propriedade justify-content. Por exemplo, de que outras formas podemos distribuir esse espaço?

Qual o valor da propriedade justify-content para essas distribuições de espaço?
Podemos distribuir os elementos dentro do pai de diversas formas, podemos por exemplo:

Colocar todo espaço à esquerda, jogando o conteúdo para direita com justify-content: flex-end.

Colocar todo espaço à direita, jogando o conteúdo para esquerda com justify-content: flex-start (que é o padrão).

Colocar todo espaço à esquerda e à direita, jogando o conteúdo para o meio com justify-content: center.

Colocar todo espaço entre os elementos como vimos antes usando justify-content: space-between.

E uma possibilidade bem interessante também é colocar o espaço em volta dos elementos. Podemos usar o justify-content: space-around para isso.


Elementos na vertical
Normalmente quando colocamos display: flex em algum elemento, os seus filhos ficam um do lado do outro. Porém existem casos em que queremos que os filhos fiquem um em baixo do outro, como podemos fazer isso?
Podemos colocar flex-direction: column no elemento pai
Podemos colocar flex-direction: column no pai, dessa forma ele muda o fluxo o qual o flexbox renderiza os elementos. Assim eles ficam um em baixo do outro.


Indo para a próxima coluna
Para arrumar nossa situação devemos falar para o flex não transbordar o conteúdo, de forma que quando o conteúdo ultrapassar o tamanho do pai, ele simplesmente quebre para uma próxima coluna. Para fazer isso usamos flex-wrap: wrap.

Tipo de flex! O flex-start joga tudo para a direita, o flex-end para a esquerda e o flex-center coloca os elementos no centro.

-------------------------EXEMPLO----------------------------------
Repare que os elementos da primeira coluna possuem uma margem a esquerda e os objetos da última uma margem a direita:
Porém, para manter as proporções tais margens não fazem sentido, elas atrapalham mais do que ajudam! Então, no caso dos elementos da última coluna, estamos lidando com objetos nas posições 4, 8, 12 e 16, ou seja, itens que são múltiplos de 4. Portanto, no arquivo flexbox.css vamos adicionar o .conteudoPrincipal-cursos-link e acrescentar o nth-child(). Como queremos pegar o "quarto filho" adicionamos entre os parênteses o 4n. O código fica da seguinte maneira:

.conteudoPrincipal-cursos-link:nth-child(4n) {
    margin-left: 0;

}
Observando a página vemos que de fato os itens tiveram a margem zerada:
Falta retirar ainda a margem esquerda dos elementos da primeira coluna. Estes objetos estão na sequência dos objetos múltiplos de 4, isto é, depois do quarto vem o quinto, depois do oitavo vem o nono, depois do décimo segundo o décimo terceiro e assim por diante. Portanto, tais objetos equivalem a 4+1, então, vamos escrever nth-child(4n+1) e colocar também a margin-left: 0:

.conteudoPrincipal-cursos-link:nth-child(4n+1) {
    margin-left: 0;

}
Dando um reload vemos que todos os objetos foram arrumados inclusive o primeiro:
Isso acontece pois o n do primeiro elemento equivale a 0, então, 4x0 + 1 = 1 e por isso ele é ajustado! No segundo item o n =1, assim, 4x1 + 1 = 5, no terceiro ícone n = 2, 4x2 + 1 = 9 e assim por diante.

Utilizando o nth, que é relativamente fácil de usar, solucionamos a questão da distribuição! O que fizemos foi um gride de caixas organizadamente posicionadas. O flex é capaz de fazer gride, ainda assim, não existe uma maneira fácil de espaçar os elementos. Foi preciso utilizar não apenas o nth mas também fazer contas com a largura e a margem para resolver o problema!

Começando o grid
Agora precisamos começar um grid, para isso usaremos flex. Como ficaria o CSS, utilizando flexbox, para organizar ( pensando apenas em posicionamento ) o seguinte HTML?

<div class="grid">
  <div class="box">Ruby on Rails</div>
  <div class="box">Java</div>
  <div class="box">HTML</div>
  <div class="box">Python</div>
  <div class="box">Wordpress</div>
  <div class="box">Bootstrap</div>
  <div class="box">Java Web</div>
  <div class="box">MySQL</div>
</div>
Quando for realizar esse teste na sua máquina, lembre-se de colocar altura, largura e alguma cor para as div`s.

.box {
  height: 50px;
  width: 50px;
  background-color: green;
}

Para organizar esse código HTML e fazermos um grid ( pensando apenas em posicionamento ) podemos escrever o seguinte código CSS:

.grid {
  display: flex;
  flex-wrap: wrap;
}
Dessa forma todos os elementos filhos ficariam um do lado do outro e quando chegassem ao limite da página quebrariam para a linha de baixo, formando assim o grid.

Repare que não consertamos margins ainda, os elementos provavelmente ficariam colados.

Espaçando os elementos do grid

Porque as vezes pode ser complicado utilizar justify-content: space-between ou space-around para o grid?
É complicado utilizá-las porque elas colocam comportamentos que não são legais para grids, por exemplo, se utilizarmos space-around e na última linha do grid tivermos apenas dois itens ao invés de quatro, o espaçamento entre eles vai ficar feio.
É complicado utilizá-las porque elas colocam comportamentos que não são legais para grids, por exemplo, se utilizarmos space-between e na última linha do grid tivermos apenas dois itens ao invés de quatro, o espaçamento entre eles vai ficar feio.
É complicado utilizá-las porque elas colocam comportamentos que não são legais para grids. Tanto space-between quanto space-around deixariam super estranha a última linha do grid caso essa tivesse menos elementos do que o total de elementos por linha.

Como espaçar corretamente os elementos de um grid

Para espaçar corretamente os elementos de um grid temos que realmente fazer contas com a boa e velha margin e width.

Se temos 3 elementos por linha podemos fazer algo do tipo:

HTML:

<div class="grid">

  <!-- primeira linha -->
  <div class="course"></div>
  <div class="course"></div>
  <div class="course"></div>

  <!-- segunda linha -->
  <div class="course"></div>
  <div class="course"></div>
  <div class="course"></div>

  <!-- terceira linha -->
  <div class="course"></div>
  <div class="course"></div>
  <div class="course"></div>

  <!-- quarta linha -->
  <div class="course"></div>
  <div class="course"></div>

</div>
CSS:

.grid {
  display: flex;
  flex-wrap: wrap;
}

.course {
  width: 31.3%;
  margin: 1%;
}

Nesse caso teriamos 3 .course por linha, cada um com width: 31.3% e margin: 1%.

De width isso totaliza: 31.3 * 3 = 93.9%.

De margin isso totaliza: 6% (1% à esquerda e 1% à direita de cada elemento).

No total temos: 93.9% + 6% = 99.9% que dá pra arredondar para 100%.

 vamos consultar a documentação do site MDN do Mozilla.

VANTAGENS E O VÍDEO
/* OBS: Tanto o "videoSobre-sobre-list" e "videoSobre-sobre" 
tem "flex-grow: 1;". O navegador pegou o espaço vazio e dividiu em dois, ou seja, metade para cada */


/* usando flex-grow para distribuir/aumentar o espaço vazio e empurrando o botão "cadastre-se já" lá para baixo */

.videoSobre-sobre-list {
    flex-grow: 1;
}


/* o tamanho do vídeo será distribuído de maneira a dividir o espaço com a parte de "Vantagens do Alurinha" */

.videoSobre-sobre {
    flex-grow: 1;
}
CURIOSIDADE
Se ao em vez de 1 tivéssemos colocado 2 o espaço total desta parte seria dividido em 3 cabendo ao vídeo 2/3 e ao Vantagens 1/2. Da mesma maneira podemos distribuir mais espaço para o Vantagens do que para o vídeo. Assim, colocando para o Vantagens um espaço maior, flex-grow: 3; teríamos 3/4 do espaço para o vantagens.

Nesse vídeo trabalhamos com flex-grow e sobre como ele divide o espaço vazio entre os flex-itens



De desktop para mobile
Quando estamos desenvolvendo um site temos que aproveitar bem o espaço da tela, para desktop podemos encaixar elementos um do lado do outro para justamente aproveitar essa largura a mais. Quando temos que adaptar nossos sites para mobile, qual o fluxo que normalmente os elementos seguem para aproveitar melhor o espaço?

Como fazer com que esse fluxo seja seguido utilizando o flexbox?
Para aproveitar o espaço precisamos colocar os elementos um em baixo do outro.

Para fazer isso devemos colocar flex-direction: column.
Para mobile devemos colocar um elemento em baixo do outro, é a melhor forma de ocupar todo o espaço para melhorar a usabilidade no celular.

Para fazer isso podemos colocar a propriedade flex-direction: column, que faz com que os elementos fiquem um em baixo do outro. Esse é o aspecto mais importante da responsividade do flexbox.

Flex container e flex items
Quando colocamos display: flex em um elemento, o navegador passa a considerar esse elemento como um flex container, ou seja, cria todo aquele comportamento que vimos anteriormente no curso, os filhos ficam um do lado do outro e podemos aplicar propriedades para espaçá-los.

Os filhos de um flex container por sua vez também ganham um nome, são chamados de flex items.

Quando utilizamos flexbox temos que ficar atentos em quem colocamos as propriedades de espaçamento e distribuição do flex. Por exemplo, existem algumas propriedades que devem ser aplicadas à flex container e outras que devem ser aplicadas nos flex items.

Propriedades do flex container e dos flex items

Quais são as propriedades que funcionam SOMENTE nos flex container e quais são as que funcionam nos flex items?flex container:

justify-content, align-items, flex-direction, flex-wrap

flex items:

order, flex-grow, flex-shrink

A propriedade display: flex pode ser usada nos dois. Se for usada em um flex item esse elemento será tanto um flex item quanto um flex container.

flex container:

justify-content, align-items, display: flex,

flex items:

order, flex-grow, flex-shrink
Existem diversos sites para consultar isso, como esse. https://css-tricks.com/snippets/css/a-guide-to-flexbox/

O melhor a se fazer aqui é ter em mente que o ideal é sempre que necessário consultar a documentação através desse site. https://css-tricks.com/snippets/css/a-guide-to-flexbox/

Lá podemos ver claramente quais propriedades são aplicadas ao container e aos flex items, não há necessidade de ficar decorando, isso virá naturalmente com a prática.

Seguindo a documentação temos:

container:

display: flex
flex-direction
justify-content
flex-wrap
flex-flow
align-items
align-content
flex item:

order
flex-grow
flex-shrink
flex-basis
flex
align-self



Ordenando o nosso menu

O nosso menu no header do site tem um link para baixar o app do Alurinha. Quando o usuário abre o nosso site com um dispositivo móvel a última opção do menu é o app. Como podemos fazer para melhorar a experiência do usuário nesse caso?
O melhor seria mudar a ordem do menu, colocando o link de baixar o app em primeiro lugar.

Podemos fazer isso com flexbox utilizando a propriedade order.


É exatamente isso, o código ficaria assim.

.cabecalhoPrincipal-nav-link-app {
  order: -1;
}

O melhor seria mudar a ordem do menu, colocando o link de baixar o app em primeiro lugar, assim logo que o usuário abrisse a nossa página ele já encontraria o link logo de cara a baixaria nosso app.

Para fazer isso devemos usar a propriedade order no nosso flex item. Podemos usar qualquer valor menor que 0 para que nosso flex item fique antes de todos.

.cabecalhoPrincipal-nav-link-app {
  order: -1;
}


Relembrando e projeto simples
é possível sempre recorrer a consultas na documentação do Flexbox acessando o seguinte link. 
https://css-tricks.com/snippets/css/a-guide-to-flexbox/
A documentação é um recurso útil para liquidar com dúvidas

ESQUERDA                
FLEX CONTAINER
É O PAI 
DISPLAY
FLEX-DIRECTION
FLEX-WRAP

DIREITA
FLEX-ITEMS
SÃO OS FILHOS
FLEX-GROW
FLEX-SHRINK

o flex-grow serve para aumentar objetos e seu padrão é flex-grow de valor 0.
O flex-shrink que serve para diminuir os objetos.O padrão do flex-shrink é 1.
flex-shrink:0? O resultado é que os itens não vão aceitar diminuição! O flex-shrink:0 mantém os elementos sempre com as mesmas medidas.
se quisermos definir tanto o flex-shrink quanto o flex-grow juntos podemos utilizar o atalho do flex, por padrão o primeiro valor equivale ao grow e o segundo ao shrink:

flex: 1 1;


_____________________________________________________________Desafios e fim______________________________________________________________


A proposta desta aula final é deixar diversos exercícios para serem feitos. Além disso, um ótimo recurso para ser utilizado é o site FlexFrog
http://flexboxfroggy.com/
A proposta é um jogo e nele é preciso alinhar um sapo em cima de uma plantinha. Para vencer o jogo é preciso utilizar o flexbox e dessa maneira se aprende de uma forma divertida.

Outro jogo que auxilia no aprendizado é o Flex Defense no site: http://www.flexboxdefense.com/
A proposta é alinhar as torres de maneira que elas consigam uma maior área de disparo.


--------------------Fazendo os elementos preencher o espaço vazio
Digamos que temos dois flex items e que precisamos que um desses elementos ocupe todo o espaço que está sobrando do flex container. Como podemos fazer isso?
Podemos usar a propriedade flex-grow. O código ficaria assim:

.flex-item {
  flex-grow: 1;
}
Para falar para um elemento / flex item crescer e ocupar todo o espaço que está sobrando dentro do flex container devemos usar a propriedade flex-grow.

Para fazê-lo crescer podemos escrever o seguinte código CSS:

.flex-item {
  flex-grow: 1;
}
Podemos colocar o valor 1 para que esse elemento ocupe todo o espaço. Mais a frente veremos como funciona direito esse valor.

----------------------Contas no flex

A propriedade flex-grow vista no exercício anterior ajuda muito caso queiramos que um elemento ocupe toda a largura restante do flex container.

Por exemplo, se temos:

Elemento 1: 200 px.

Elemento 2: 200 px.

Espaço vazio que sobrou do flex container: 600 px.

Total: 1000 px.

Se colocamos flex-grow: 1 no primeiro elemento, ele passa a ter 800 px de largura, ou seja:

Espaço vazio + Elemento 1: 800 px.

E o segundo elemento continua tendo 200 px de largura.

Agora, se colocarmos flex-grow: 1 nos dois elementos, o que aconteceria? Qual tamanho ficaria o elemento 1? E o elemento 2?

O que aconteceria é o seguinte:

Considere o espaço vazio inicial: 600 px.

Como os dois elementos tem flex-grow: 1, a soma de flex-grow que temos vai dar 1 + 1 = 2.

O navegador pega esse espaço vazio e divide pelo número de flex-grow que temos: 600 px : 2 = 300 px.

Agora ele distribui esse espaço para cada um dos elementos que colocamos flex-grow.

Elemento 1: 300 px + 200 px = 500 px.

Elemento 2: 300 px + 200 px = 500 px.

------------------------------------Mantendo o vídeo do mesmo tamanho

Imagine que no nosso site temos um video do Youtube, imagine que mesmo se o usuário diminuir a tela, o nosso video não deva diminuir de tamanho. Como podemos fazer isso?

Imagine que nosso vídeo é um flex item e que o código HTML é o que segue:
<section class="videoSobre">
<div class="container">
    <iframe class="videoSobre-video" width="560" height="315" src="https://www.youtube.com/embed/bIl"></iframe>

    <div class="videoSobre-sobre">
      <h2 class="videoSobre-sobre-title">Vantagens do Alurinha</h2>
      <ul class="videoSobre-sobre-list">
        <li class="videoSobre-sobre-item">Estude onde quiser</li>
        <li class="videoSobre-sobre-item">Novos cursos todos os meses</li>
        <li class="videoSobre-sobre-item">Cursos compatíveis com o mercado</li>
      </ul>
      <button class="videoSobre-button">Cadastre-se já</button>
    </div>
  </div>
</section>
Podemos simplesmente colocar a propriedade flex-shrink no elemento, por exemplo:

.videoSobre-video {
  flex-shrink: 0
}

Perfeito! Simplesmente colocamos flex-shrink: 0 no nosso elemento que não queremos que diminua.
Simplesmente colocamos flex-shrink: 0 no nosso elemento que não queremos que diminua, no caso o código ficaria assim:

.videoSobre-video {
  flex-shrink: 0;
}
----------------------------------------------------Diminuindo proporcionalmente os elementos

Considere o código HTML abaixo.

<main class="flexContainer">        
  <div class="flexItem firstRow"></div>
  <div class="flexItem firstRow"></div>
  <div class="flexItem firstRow"></div>
  <div class="flexItem firstRow"></div>
</main>
Considere agora que estejamos em um contexto flex. E que cada flexItem tem 200 px de width.

CSS

.flexContainer {
  display: flex;
}
.flexItem {
  width: 200px;
}
1) Quando a largura da tela chega a 800 px, os elementos mantém 200 px de largura cada um preenchendo todo o espaço da tela, porém, o que acontece com a largura dos flexItem quando diminuímos a tela para por exemplo 600 px.

2) O que acontece com a largura deles também quando aplicamos o seguinte CSS no nosso código?

.flexItem:first-child {
  flex-shrink: 2;
}
Sugestão: Crie um arquivo HTML e CSS, escreva esse código e faça os testes, utilize também valores diferentes!
1) Quando diminuimos a tela para 600 px os flex-item diminuem seu tamanho igualmente entre si, ou seja, como a tela diminuiu 200 px e temos 4 flex items, cada um diminuiu 50 px. Sendo assim cada flex-item ficou com 150 px no fim.

2) Quando colocamos flex-shrink: 2 no primeiro, ele diminui de forma diferente do que os outros elementos. As contas que ocorrem são semelhantes as que ocorrem no flex-grow.

Primeiro de tudo o navegador pega o total de flex-shrink que nossos flex items tem, como temos por padrão flex-shrink: 1 nos flex items, a conta fica assim:

2 + 1 + 1 + 1 = 5. Isso pois o primeiro colocamos flex-shrink:2.

Como diminuímos 200 px do tamanho total, o navegador pega esse valor e divide pelo total de flex-shrink. Fica: 200 px : 5 = 40 px.

Dessa forma o navegador tira 2 partes do primeiro elemento 200px - 80px = 120px e tira 1 parte dos demais, ou seja: 200 px - 40 px = 160 px.

------------------------------------------Definindo largura dos elementos com flex

A propriedade flex-basis serve para que?

A propriedade flex-basis serve para definir uma largura para o elemento caso o flex container esteja com flex-direction: row.

flex-basis: 500px;

Alternativa correta.

Alternativa correta
A propriedade flex-basis serve para definir uma altura para o elemento caso o flex container esteja com flex-direction: column.

flex-basis: 500px;

Alternativa correta.

A propriedade flex-basis serve para definir uma largura ou altura para o flex item. Se o flex container tiver com flex-direction: column, o flex-basis no flex item servirá para definir uma height. Caso o flex-direction: row, ele funciona como um width.

------------------------------------------------------Condensando flex-grow, shrink e basis

Qual é a propriedade que usamos para condensar as propriedades flex-grow, flex-shrink e flex-basis?

A propriedade é a propriedade flex.

  flex: 1 1 300px;
A ordem dos valores é:

flex-grow, flex-shrink, flex-basis.

Podemos usar a propriedade flex. A sintaxe fica simples assim:

  flex: 1 1 300px;
A ordem dos valores é:

flex-grow, flex-shrink, flex-basis.

----------------------------------------------------------Invertendo a ordem de todos os elementos

O flex permite que nós possamos alterar muitas coisas nos elementos, seja distribuição dos espaços, tamanhos, direção de renderização e alinhamento. Além de tudo isso também podemos mudar o sentido nos quais os nossos elementos são renderizados. Faça o teste. Abra nossa página principal do site index.html, lembra do grid que fizemos? O CSS que usamos deve estar assim:

.conteudoPrincipal-cursos {
  display: flex;
  flex-wrap: wrap;
}
Mude agora o flex-wrap. Coloque flex-wrap: wrap-reverse.

.conteudoPrincipal-cursos {
  display: flex;
  flex-wrap: wrap-reverse;
}
Tudo que estava em baixo foi para cima! Ele inverteu a ordem das linhas!

Tente agora:

.conteudoPrincipal-cursos {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row-reverse;
}
Repare que agora ele inverteu a ordem dos elementos nas linhas.

Podemos usar também flex-direction: column-reverse nos casos em que usamos flex-direction: column. Ele inverterá a ordem!

--------------------------------------------------Jogos e align-self------------------------------------------------------

Nos jogos você encontrará uma outra propriedade chamada align-self. Essa propriedade é aplicada ao flex item e faz com que ele se alinhe individualmente.

Lembra da propriedade align-items que colocávamos no flex container? O align-self faz a mesma coisa, só que alinha um único elemento e é colocada no flex item.
